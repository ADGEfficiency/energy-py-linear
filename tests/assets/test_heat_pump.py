import energypylinear as epl
import numpy as np


def test_heat_pump_optimization_price() -> None:
    """Test heat pump optimization for price."""

    gas_price = 20
    #  TODO pass this into model
    blr_effy = 0.8
    cop = 3.0

    asset = epl.HeatPump(electric_power_mw=1.0, cop=cop)
    """
    cost to supply 1 MWh of high temp heat

    BAU = gas_prices / blr_effy

    heat pump = electricity_price / COP

    breakeven_electricity_price = gas_prices / blr_effy * COP
    """
    breakeven_electricity_price = gas_price / blr_effy * cop

    tolerance = 1
    results = asset.optimize(
        electricity_prices=[
            -100,
            -50,
            50,
            100,
            breakeven_electricity_price + tolerance,
            breakeven_electricity_price - tolerance
        ],
        gas_prices=gas_price,
        #  these are a bit hacky - will be expanded on in later tests
        #  the low temperature generation is a free source of low temperature heat
        #  which can be dumped or used by the heat pump to make high temperature heat
        high_temperature_load_mwh=100,
        low_temperature_generation_mwh=100
    )
    simulation = results.simulation

    #  when prices are low, the heat pump works
    #  when prices are high, the heat pump doesn't work
    np.testing.assert_array_equal(
        simulation["site-import_power_mwh"],
        [1.0, 1.0, 1.0, 0.0, 0.0, 1.0]
    )

    #  test COP using simulation totals
    np.testing.assert_equal(
        sum(simulation['heat-pump-high_temperature_generation_mwh']) /
        sum(simulation['heat-pump-electric_load_mwh']),
        cop
    )

    #  test COP by interval
    subset = simulation[
        simulation['heat-pump-high_temperature_generation_mwh'] > 0
    ]
    np.testing.assert_equal(
        subset['heat-pump-high_temperature_generation_mwh'] /
        subset['heat-pump-electric_load_mwh'],
        np.full_like(subset.iloc[:, 0].values, cop)
    )

    #  test we don't consume more electricity than the heat pump size
    tol = 1e-7
    np.testing.assert_array_less(
        simulation['heat-pump-electric_load_mwh'],
        1.0 + tol
    )

    #  test max sizes
    #  test we don't consume more electricity than the heat pump size
    np.testing.assert_array_less(
        simulation['heat-pump-high_temperature_generation_mwh'],
        1.0 * cop + tol
    )

    #  test the energy balance across the heat pump
    #  the high temperature heat generated by the heat pump is the sum of the electricity and low temp energy
    np.testing.assert_array_equal(
        simulation['heat-pump-high_temperature_generation_mwh'] \
        - simulation['heat-pump-electric_load_mwh'] \
        - simulation['heat-pump-low_temperature_load_mwh'],
        0.0
    )

    """
    change the high + low temp loads
    - see that they constrain the heat pump use correctly
    """
